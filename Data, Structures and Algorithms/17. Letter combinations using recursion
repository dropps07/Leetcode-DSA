class Solutions {
String res = new ArrayList<>();
Map<Character, char[]> map = new HashMap<>();
public void helper(String digitis, int index, String str){
if(digits.length() == index){
res.add(str)l;
return;
}
char key = str.charAt(index);
char[] poss = map.get(key);
for(possChar[]:poss){
helper(digits, index+1; str + possChar);
}
}

public List<String> LetterCombinations(String digits){
 if(digits.length() == 0){
return res;
 }
map.put('2', new char[]{'a', 'b', 'c'};
map.put('3', new char[]{'d', 'e', 'f'};
map.put('4', new char[]{'g', 'h', 'i'};
map.put('5', new char[]{'j', 'k', 'l'};
map.put('6', new char[]{'m', 'n', 'o'};
map.put('7', new char[]{'p', 'q', 'r','s'};
map.put('8', new char[]{'t', 'u', 'v'};
map.put('9', new char[]{'w', 'x', 'y','z'};
helper(digits, 0, "");
return res;
}
}
