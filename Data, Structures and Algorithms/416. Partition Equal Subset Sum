class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int i : nums) {
            sum += i;
        }
        if (sum % 2 != 0) {
            return false;
        }
        int target = sum / 2;
        return subsetSum(nums, target);
    }

    private boolean subsetSum(int[] nums, int target) {
        int n = nums.length;
        boolean[][] temp = new boolean[n + 1][target + 1];
        for (int i = 0; i <= n; i++) {
            temp[i][0] = true; // Initialization
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                if (nums[i - 1] <= j) {
                    temp[i][j] = temp[i - 1][j - nums[i - 1]] || temp[i - 1][j];
                } else {
                    temp[i][j] = temp[i - 1][j];
                }
            }
        }
        return temp[n][target];
    }
}
