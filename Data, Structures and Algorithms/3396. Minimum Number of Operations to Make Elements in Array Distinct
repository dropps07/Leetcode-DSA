class Solution {
    public int minimumOperations(int[] nums) {
        int opps =0;
        int n = nums.length;
        if(n ==2 && nums[0] == nums[1]){
            return 1;
        }
        if(n ==2 || n==1){
            return 0;
        }
        List<Integer> list = new ArrayList<>();
        for(int num: nums){
            list.add(num);
        }
        while(duplicates(list)){
            opps++;
            removeThree(list);
        }
        return opps;
}
private boolean duplicates(List<Integer> list){
    for(int i=0;i<list.size();i++){
        for(int j=i+1;j<list.size();j++){
            if(list.get(i).equals(list.get(j))){
                return true;
            }
        }
    }return false;
}

private void removeThree(List<Integer> list) {
    if (list.size() >= 3) {
        for (int i = 0; i < 3; i++) {
            list.remove(0);
        }
    } else {
        while (!list.isEmpty()) {
            list.remove(0);
        }
    }
}
}
