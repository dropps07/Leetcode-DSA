//Approach 1
class Solution {
    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length;j++){
                if(nums[j] == key && Math.abs(i-j)<=k){
                    list.add(i);
                    break;
                }
            }
        } Collections.sort(list);
        return list;
    }
}

//Approach 2 using hashmaps to avoid using sorting func
class Solution {
    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {
        Map<Integer, Boolean> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(nums[i]== key){
                int start = Math.max(0, i-k);
                int end = Math.min(nums.length-1, i+k);  //its like taking base cases to prevent overflow
                for(int j=start;j<=end;j++){
                    map.put(j, true);
                }
            }
        }
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(i)){
                list.add(i);
            }
        }
        return list;
    }
}
